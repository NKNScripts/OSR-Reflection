(*
Players
=======

Players contains the player api methods.

*)

{$include_once ..\wrappers\player.simba}

type
  TPlayerApi = type(TApi);
var
  playerApi: TPlayerApi;

function TPlayerApi.getPlayers(filter: function(p: TPlayer): Boolean): TPlayerArray;
var
  len, i: Integer;
  player: TPlayer;
begin
  len := reflectLib.getFieldArraySize(0, hook_Client_getLocalPlayers);
  for i:= 0 to (len - 1) do
  begin
    player.create(0, hook_Client_getLocalPlayers, i);
    if player.isNull or (not filter(player)) then
    begin
      player.free;
      continue;
    end;
    Insert(player, Result);
  end;
end;

function TPlayerApi.getPlayers: TPlayerArray; overload;
  function filter(p: TPlayer): Boolean;
  begin
    Result := true;
  end;
begin
  Result := Self.getPlayers(@filter);
end;

function TPlayerApi.getPlayer(filter: function(p: TPlayer): Boolean): TPlayer;
var
  players: TPlayerArray;
  len: Integer;
begin
  players := Self.getPlayers(@filter);
  len := Length(players);
  if (len > 0) then
  begin
    Result := players[0];
    Delete(players, 0, 1);
  end;
  players.free;
end;

function TPlayerApi.findPlayers(filter: function(p: TPlayer): Boolean; var players: TPlayerArray): Boolean;
begin
  players.free;
  players := Self.getPlayers(@filter);
  Result := Length(players) > 0;
end;

function TPlayerApi.findPlayers(filter: function(p: TPlayer): Boolean): Boolean; overload;
var
  players: TPlayerArray;
begin
  Result := Self.findPlayers(@filter, players);
  players.free;
end;

function TPlayerApi.findPlayer(filter: function(p: TPlayer): Boolean; var player: TPlayer): Boolean;
begin
  player.free;
  player := Self.getPlayer(@filter);
  Result := not player.isNull;
  if not Result then
    player.free;
end;

function TPlayerApi.findPlayer(filter: function(p: TPlayer): Boolean): Boolean; overload;
var
  player: TPlayer;
begin
  Result := Self.findPlayer(@filter, player);
  player.free;
end;
