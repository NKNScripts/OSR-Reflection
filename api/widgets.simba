(*
Widgets
=======

Widgets contains the widget api methods.

*)

{$include_once ..\wrappers\widget.simba}

type
  TWidgetApi = type(TApi);
var
  widgetAPI: TWidgetApi;

function TWidgetApi.isValidWidget(index: Integer): Boolean;
begin
  Result := reflectLib.getFieldArrayBoolean(0, hook_Client_getValidWidgets, index);
end;

function TWidgetApi.getValidWidgetGroups: TIntegerArray;
var
  len, i, c: Integer;
begin
  len := reflectLib.getFieldArraySize(0, hook_Client_getWidgets);
  c:= 0;
  SetLength(Result, len);

  for i := 0 to (len - 1) do
  begin
    if not Self.isValidWidget(i) then
      continue;
    Result[c] := i;
    inc(c);
  end;

  SetLength(Result, c);
end;

function TWidgetApi.getWidgetIndex(groupIndex, parentIndex, childIndex: Integer): TWidget;
var
  parent: TWidget;
begin
  if Self.isValidWidget(groupIndex) then
  begin
    parent.create(0, hook_Client_getWidgets, groupIndex, parentIndex, 'TWidgetApi.getWidgetIndex');
    if (childIndex > -1) then
    begin
      Result := parent.getChild(childIndex);
      parent.free;
    end else
      Result := parent;
  end;
end;

function TWidgetApi.getWidgetIndex(groupIndex, widgetIndex: Integer): TWidget; overload;
begin
  Result := TWidgetApi.getWidgetIndex(groupIndex, widgetIndex, -1);
end;

function TWidgetApi.getWidgetGroup(index: Integer): TWidgetArray;
var
  len, i, curI: Integer;
  temp: TWidget;
  children: TWidgetArray;
begin
  curI := 0;
  if Self.isValidWidget(index) then
  begin
    temp := Self.getWidgetIndex(index, curI);
    while (not temp.isNull) do
    begin
      Insert(temp, Result);
      Inc(curI);
      children := temp.getChildren;
      len := Length(children);
      for i := 0 to (len - 1) do
        Insert(children[i], Result);
      temp := Self.getWidgetIndex(index, curI);
    end;
    if temp.isNull then
      temp.free;
  end;
end;

function TWidgetApi.getWidgets(filter: function(w: TWidget): Boolean): TWidgetArray;
var
  i, h, len, len2: Integer;
  groups: TIntegerArray;
  widgets: TWidgetArray;
begin
  groups := Self.getValidWidgetGroups;
  len := Length(groups);
  for i := 0 to (len - 1) do
  begin
    widgets := Self.getWidgetGroup(groups[i]);
    len2 := Length(widgets);
    for h := 0 to (len2 - 1) do
    begin
      if widgets[h].isNull or (not filter(widgets[h])) then
      begin
        widgets[h].free;
        continue;
      end;
      Insert(widgets[h], Result);
    end;
  end;
end;

function TWidgetApi.getWidgets: TWidgetArray; overload;
  function filter(w: TWidget): Boolean;
  begin
    Result := true;
  end;
begin
  Result := Self.getWidgets(@filter);
end;

function TWidgetApi.getWidget(filter: function(w: TWidget): Boolean): TWidget;
var
  widgets: TWidgetArray;
  len: Integer;
begin
  widgets := Self.getWidgets(@filter);
  len := Length(widgets);
  if (len > 0) then
  begin
    Result := widgets[0];
    Delete(widgets, 0, 1);
  end;
  widgets.free;
end;

function TWidgetApi.findWidgets(filter: function(w: TWidget): Boolean; var widgets: TWidgetArray): Boolean;
begin
  widgets.free;
  widgets := Self.getWidgets(@filter);
  Result := Length(widgets) > 0;
end;

function TWidgetApi.findWidgets(filter: function(w: TWidget): Boolean): Boolean; overload;
var
  widgets: TWidgetArray;
begin
  Result := Self.findWidgets(@filter, widgets);
  widgets.free;
end;

function TWidgetApi.findWidget(filter: function(w: TWidget): Boolean; var widget: TWidget): Boolean;
begin
  widget.free;
  widget := Self.getWidget(@filter);
  Result := not widget.isNull;
  if not Result then
    widget.free;
end;

function TWidgetApi.findWidget(filter: function(w: TWidget): Boolean): Boolean; overload;
var
  widget: TWidget;
begin
  Result := Self.findWidget(@filter, widget);
  widget.free;
end;

