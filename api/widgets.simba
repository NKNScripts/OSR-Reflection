(*
Widgets
=======

Widgets contains the widget api methods.

*)

{$include_once ..\wrappers\widget.simba}

type
  TWidgetApi = type(TApi);
var
  widgetAPI: TWidgetApi;

function TWidgetApi.isValidWidget(index: Integer): Boolean;
begin
  Result := reflectLib.getFieldArrayBoolean(0, hook_Client_getValidWidgets, index);
end;

function TWidgetApi.getValidWidgetGroups: TIntegerArray;
var
  len, i, c: Integer;
begin
  len := reflectLib.getFieldArraySize(0, hook_Client_getWidgets);
  c:= 0;
  SetLength(Result, len);

  for i := 0 to (len - 1) do
  begin
    if not self.isValidWidget(i) then
      continue;
    Result[c] := i;
    inc(c);
  end;

  SetLength(Result, c);
end;

function TWidgetApi.getWidget(groupIndex, widgetIndex: Integer): TWidget;
begin
  if self.isValidWidget(groupIndex) then
    Result.create(0, hook_Client_getWidgets,
      groupIndex, widgetIndex, 'getWidget');
end;

function TWidgetApi.getWidget(groupIndex, parentIndex, childIndex: Integer): TWidget; overload;
var
  parent: TWidget;
begin
  if self.isValidWidget(groupIndex) then
  begin
    parent.create(0, hook_Client_getWidgets,
      groupIndex, parentIndex, 'getWidget2');
    Result := parent.getChild(childIndex);
    parent.free;
  end;
end;

function TWidgetApi.getWidgetGroup(index: Integer): TWidgetArray;
var
  c: Integer;
  temp: TWidget;
begin
  c := 0;
  if self.isValidWidget(index) then
  begin
    SetLength(Result, 1000);
    temp := widgetAPI.getWidget(index, c);
    while (not temp.isNull) do
    begin
      Result[c] := temp;
      inc(c);
      temp := widgetAPI.getWidget(index, c);
    end;
    if temp.isNull then
      temp.free;
  end;
  SetLength(Result, c);
end;
