(*
Character
=========

Character contains the Character record and accessors

*)

type
  TCharacter = type(TRSObject);

function TCharacter.getAnimation: Integer;
begin
  Result := reflectLib.getFieldInt(Self.ref, hook_Character_getAnimation);
end;

function TCharacter.getCombatCycle: Integer;
begin
  Result := reflectLib.getFieldInt(Self.ref, hook_Character_getCombatCycle);
end;

function TCharacter.getHealth: Integer;
begin
  Result := reflectLib.getFieldInt(Self.ref, hook_Character_getHealth);
end;

function TCharacter.getHitCycles: TIntegerArray;
begin
  Result := reflectLib.getFieldIntArray(Self.ref, hook_Character_getHitCycles);
end;

function TCharacter.getHitDamages: TIntegerArray;
begin
  Result := reflectLib.getFieldIntArray(Self.ref, hook_Character_getHitDamages);
end;

function TCharacter.getHitTypes: TIntegerArray;
begin
  Result := reflectLib.getFieldIntArray(Self.ref, hook_Character_getHitTypes);
end;

function TCharacter.getInteractingIndex: Integer;
begin
  Result := reflectLib.getFieldInt(Self.ref, hook_Character_getInteractingIndex);
end;

function TCharacter.getMaxHealth: Integer;
begin
  Result := reflectLib.getFieldInt(Self.ref, hook_Character_getMaxHealth);
end;

function TCharacter.getOrientation: Integer;
begin
  Result := reflectLib.getFieldInt(Self.ref, hook_Character_getOrientation);
end;

function TCharacter.getQueueLength: Integer;
begin
  Result := reflectLib.getFieldInt(Self.ref, hook_Character_getQueueLength);
end;

function TCharacter.getQueueTraversed: TBoolArray;
begin
  Result := reflectLib.getFieldBooleanArray(Self.ref, hook_Character_getQueueTraversed);
end;

function TCharacter.getQueueX(index: Integer): Integer;
begin
  Result := reflectLib.getFieldArrayint(Self.ref, hook_Character_getQueueX, index);
end;

function TCharacter.getQueueY(index: Integer): Integer;
begin
  Result := reflectLib.getFieldArrayint(Self.ref, hook_Character_getQueueY, index);
end;

function TCharacter.getQueueX: TIntegerArray; overload;
begin
  Result := reflectLib.getFieldIntArray(Self.ref, hook_Character_getQueueX);
end;

function TCharacter.getQueueY: TIntegerArray; overload;
begin
  Result := reflectLib.getFieldIntArray(Self.ref, hook_Character_getQueueY);
end;

function TCharacter.getText: String;
begin
  Result := reflectLib.getFieldString(Self.ref, hook_Character_getText);
end;

function TCharacter.getRawX: Integer;
begin
  Result := reflectLib.getFieldInt(Self.ref, hook_Character_getX);
end;

function TCharacter.getRawY: Integer;
begin
  Result := reflectLib.getFieldInt(Self.ref, hook_Character_getY);
end;

function TCharacter.getLocalX: Integer;
begin
  Result := Self.getRawX shr _LOCAL_XY_SHIFT;
end;

function TCharacter.getLocalY: Integer;
begin
  Result := Self.getRawY shr _LOCAL_XY_SHIFT;
end;

function TCharacter.getX: Integer;
begin
  Result := rsclient.getBaseX + Self.getLocalX;
end;

function TCharacter.getY: Integer;
begin
  Result := rsclient.getBaseY + Self.getLocalY;
end;

function TCharacter.getRawTile: TPoint;
begin
  Result := Point(Self.getRawX, Self.getRawY);
end;

function TCharacter.getLocalTile: TPoint;
begin
  Result := Point(Self.getLocalX, Self.getLocalY);
end;

function TCharacter.getTile: TPoint;
begin
  Result := Point(Self.getX, Self.getY);
end;

function TCharacter.isInSequence: Boolean;
begin
  Result := reflectLib.getFieldBoolean(Self.ref, hook_Character_isInSequence);
end;


function TCharacter.isInteracting():boolean;
begin
  result := not(self.getInteractingIndex = -1);
end;


function TCharacter.getInteracting():TCharacter;
var
  index:integer;
  interacter:TCharacter;
begin
  index := Self.getInteractingIndex();
  if(index = -1) then
    result := interacter;
  if(index < _INTERACTING_INDEX) then
  begin
    interacter.create(0, hook_Client_getLocalNPCs, index, 'TCharacter.getInteracting');
    if (interacter.isNull) then
    begin
      interacter.free;
      result := interacter;
      exit;
    end;
    result := interacter;
  end else
    if(index > _INTERACTING_INDEX) then
    begin
      interacter.create(0,hook_Client_getLocalPlayers,index-_INTERACTING_INDEX, 'TCharacter.getInteracting');
       if (interacter.isNull) then
      begin
        interacter.free;
        result := interacter;
        exit;
      end;
      result := interacter;
    end else
      result := interacter;
end;

function TCharacter.getHealthPercentage():extended;
begin
  if(Self.getMaxHealth() <= 0) then
    result := 0
  else
    result := 100 * (Self.getHealth()/Self.getMaxHealth());
end;

function TCharacter.isAnimating():boolean;
begin
  result := not Self.getAnimation = -1;
end;

function TCharacter.isMoving():boolean;
begin
  result := not Self.getQueueLength = 0;
end;





