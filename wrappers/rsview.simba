(*
RSView
======

RSView contains view-related conversion and accessor functions

*)

function TRSClient.getMinimapAngleRaw: Integer;
begin
  Result := Self.getMapOffset + Self.getMapAngle and $7FF;
end;

function TRSClient.getMinimapAngleDeg: Extended;
begin
  Result := 360 - (Self.getMinimapAngleRaw / 2048.0 * 360);
end;

function TRSClient.getMinimapAngleRad: Extended;
begin
  Result := Radians(getMinimapAngleDeg);
end;

function TRSClient.getCameraAngle: Integer;
begin
  Result := Self.getCameraPitch;//TODO: Find Calculation for 0-100
end;

function TRSClient.getTileHeight(tile: TPoint): Integer;
var
  x, y, plane, ground: Integer;
  base: TPoint;
begin
  Result := 0;
  base := Self.getBaseTile;
  x := tile.x - base.x;
  y := tile.y - base.y;
  if ((not InRange(x, 0, 104)) or (not InRange(y, 0, 104))) then
    Exit;
  plane := Self.getPlane;
  ground := reflectLib.getFieldArray3DByte(0, hook_client_getTileSettings, 1, x, y);
  if ((plane < 3) and ((ground and 2) <> 0)) then
    inc(plane);

  Result := -reflectLib.getFieldArray3DInt(0, hook_client_getTileHeights, plane, x, y);
end;

function TRSClient.worldToScreen(x, y, z: Extended): TPoint;
var
  yaw, pitch, cosX, cosY, sinX, sinY, temp: Extended;
begin
  Result := Point(-1, -1);
  if (not InRange(Round(x), 128, 13056)) or (not InRange(Round(y), 128, 13056)) then
  begin
    Exit;
  end;
  z := -z;
  x := x - Self.getCameraX;
  y := y - Self.getCameraY;
  z := z - Self.getCameraZ;
  yaw := Self.getCameraYaw;
  pitch :=  Self.getCameraPitch;
  cosX := Self.getCosineTable(Floor(yaw));
  cosY := Self.getCosineTable(Floor(pitch));
  sinX := Self.getSineTable(Floor(yaw));
  sinY := Self.getSineTable(Floor(pitch));
  temp := Sar(Round((cosX * x) + (y * sinX)), 16);
  y := Sar(Round((y * cosX) - (x * sinX)), 16);
  x := Round(temp);
  temp := Sar(Round((z * cosY) - (y * sinY)), 16);
  y := Sar(Round((z * sinY) - ((-cosY) * y)), 16);
  z := Round(temp);
  if (y < 50) then
  begin
    Exit;
  end;
  Result.x := Round((Floor(x) shl 9) / y) + 259;
  Result.y := Round((Floor(z) shl 9) / y) + 170;
end;

function TRSClient.tileToMinimap(tile: TPoint): TPoint;
var
  x, y, scale, offset, angle, ssin, ccos: Integer;
  meTile: TPoint;
begin
  meTile := Self.getRawTile;
  x := Floor(((tile.X - Self.getBaseX) * 4 + 2) - meTile.X / 32);
  y := Floor(((tile.Y - Self.getBaseY) * 4 + 2) - meTile.Y / 32);
  if (x*x + y*y > 6400) then
    Exit(Point(-1, -1));
  angle := Self.getMiniMapAngleRaw;
  scale := Self.getMapScale + 256;
  ssin := Floor((Self.getSineTable(angle) * 256) / scale);
  ccos := Floor((Self.getCosineTable(angle) * 256) / scale);
  Result.X := _MAP_X_OFFSET + Sar(x * ccos + y * ssin, 16);
  Result.Y := _MAP_Y_OFFSET - Sar(y * ccos - x * ssin, 16);
end;

