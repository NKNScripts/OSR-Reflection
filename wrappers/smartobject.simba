(*
SmartObject
===========

SmartObject contains TSmartObject and TSmartObjectArray(implementation of an
ArrayList)

*)

{$include_once ..\data\hooks.simba}

type
  TSmartObject = record
    ref: PtrUInt;
    name: String;
    hook: THook;
  end;

  TSmartObjectArray = array of TSmartObject;

procedure TSmartObject.create(_ref: PtrUInt; _name: String; _hook: THook);
begin
  Self.ref := _ref;
  Self.name := _name;
  Self.hook := _hook;
end;

function TSmartObject.isNull: Boolean;
begin
  Result := (Self.ref = 0) and Self.hook.isNull;
end;

function TSmartObject.toStr: String;
begin
  if Self.name = '' then
    Result := 'SmartObject: '
  else
    Result := Self.name + ': ';
  Result := Result + toString(Self.ref)+ '    ' + Self.hook.toStr;
end;

procedure TSmartObjectArray.setSize(c: Integer);
begin
  SetLength(self, c);
end;

function TSmartObjectArray.getSize: Integer;
begin
  Result := Length(self);
end;

procedure TSmartObjectArray.incSize(c: Integer);
begin
  Self.SetSize(Self.getSize + c);
end;

procedure TSmartObjectArray.incSize; overload;
begin
  Self.IncSize(1);
end;

procedure TSmartObjectArray.decSize(c: Integer);
begin
  Self.SetSize(Self.getSize - c);
end;

procedure TSmartObjectArray.decSize; overload;
begin
  Self.DecSize(1);
end;

function TSmartObjectArray.get(index: Integer): TSmartObject;
begin
  Result := self[index];
end;

function TSmartObjectArray.getName(_name: String; var index: Integer): TSmartObject;
var
  hi, i: Integer;
begin
  hi := Self.getSize - 1;
  for i := 0 to hi do
    if self[i].name = _name then
    begin
      index := i;
      Exit(self[i]);
    end;
  index := -1;
  Exit;
end;

function TSmartObjectArray.getRef(_ref: PtrUInt; var index: Integer): TSmartObject;
var
  hi, i: Integer;
begin
  hi := High(self);
  for i := 0 to hi do
    if self[i].ref = _ref then
    begin
      index := i;
      Exit(self[i]);
    end;
  index := -1;
  Exit;
end;

function TSmartObjectArray.setAt(index: Integer; so: TSmartObject): Boolean;
begin
  if (index < Self.getSize) and (index > -1) then
  begin
    self[index] := so;
    Exit(True);
  end else
  begin
    writeln('** TSmartObjectArray/', Between('"', '"', toString(@self)),
      ': Index = "', index, '" out of bounds **');
    Exit(False);
  end;
end;

procedure TSmartObjectArray.add(so: TSmartObject);
begin
  Self.incSize;
  Self.setAt(Self.getSize - 1, so);
end;

procedure TSmartObjectArray.add(ref: PtrUInt; hook: THook; name: String); overload;
var
  so: TSmartObject;
begin
  so.create(ref, name, hook);
  Self.add(so);
end;

procedure TSmartObjectArray.swap(index1, index2: Integer);
var
  temp: TSmartObject;
  len: Integer;
begin
  if (index1 = index2) then
    Exit;

  len := Self.getSize;
  if (index1 > len) or (index1 < 0) then
  begin
    writeln('** TSmartObjectArray/', Between('"', '"', toString(@self)),
      ': Index = "', index1, '" out of bounds **');
    Exit;
  end if (index2 > len) or (index2 < 0) then
  begin
    writeln('** TSmartObjectArray/', Between('"', '"', toString(@self)),
      ': Index = "', index2, '" out of bounds **');
    Exit;
  end;

  temp := self[index1];
  self[index1] := self[index2];
  self[index2] := temp;
end;

procedure TSmartObjectArray.remove(index: Integer);
begin
  Self.swap(index, Self.getSize-1);
  Self.decSize;
end;

procedure TSmartObjectArray.removeName(_name: String);
var
  i: Integer;
begin
  while not Self.getName(_name, i).isNull do
    Self.remove(i);
end;

procedure TSmartObjectArray.removeRef(_ref: PtrUInt);
var
  i: Integer;
begin
  while not Self.getRef(_ref, i).isNull do
    Self.remove(i);
end;

procedure TSmartObjectArray.removeAll;
begin
  Self.decSize(Self.getSize);
end;

procedure TSmartObjectArray.create;
begin
  Self.setSize(0);
end;

function TSmartObjectArray.toStr: String;
var
  i, len: Integer;
begin
  len := Self.getSize;
  Result := Between('"', '"', toString(@self));
  if (len < 1) then
    Exit(Result + ': TSmartObjectsArray is empty');
  for i := 0 to len - 1 do
  begin
    Result := Result + #13#10 + '[' + toString(i) + ']: ' + self[i].toStr;
  end;
end;
